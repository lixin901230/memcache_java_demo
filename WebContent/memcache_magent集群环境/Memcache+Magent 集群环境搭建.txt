
Memcached的代理服务器软件：magent使用小记

I、认识 Memcache 与 Magent
	1、首先说明下memcached存在如下问题
		在 Memcached中可以保存的item数据量是没有限制的，只要内存足够。
	　　Memcached单进程最大使用内存为2G，要使用更多内存，可以分多个端口开启多个Memcached进程； 
	　　最大30天的数据过期时间,设置为永久的也会在这个时间过期，常量REALTIME_MAXDELTA 60*60*24*30控制；
	　　最大键长为250字节，大于该长度无法存储，常量KEY_MAX_LENGTH 250控制； 
	　　单个item最大数据是1MB，超过1MB数据不予存储，常量POWER_BLOCK 1048576进行控制，它是默认的slab大小； 
	　　最大同时连接数是200，通过 conn_init()中的freetotal进行控制，最大软连接数是1024，通过 settings.maxconns=1024 进行控制； 
	　　跟空间占用相关的参数：settings.factor=1.25, settings.chunk_size=48, 影响slab的数据占用和步进方式；

	2、memcached是一种无阻塞的socket通信方式服务，基于libevent库，由于无阻塞通信，对内存读写速度非常之快。
	　　memcached分服务器端和客户端，可以配置多个服务器端和客户端，应用于分布式的服务非常广泛。
	　　memcached作为小规模的数据分布式平台是十分有效果的。

	3、memcached是键值一一对应，key默认最大不能超过128个字 节，value默认大小是1M，也就是一个slabs，如果要存2M的值（连续的），不能用两个slabs，因为两个slabs不是连续的，无法在内存中 存储，故需要修改slabs的大小，多个key和value进行存储时，即使这个slabs没有利用完，那么也不会存放别的数据。

	4、集群配置
		由于Memcached服务器与服务器之间没有任何通讯，并且不进行任何数据复制备份，所以当任何服务器节点出现故障时，会出现单点故障，如果需要实现HA，则需要通过另外的方式来解决。
		通过Magent缓存代理，防止单点现象，缓存代理也可以做备份，通过客户端连接到缓存代理服务器，缓存代理服务器连接缓存连接服务器，缓存代理服务器可以连接多台Memcached机器可以将每台Memcached机器进行数据同步。如果其中一台缓存服务器down机，系统依然可以继续工作，如果其中一台Memcached机器down掉，数据不会丢失并且可以保证数据的完整性。具体可以参考：http://code.google.com/p/memagent/

	5、memcache集群的实现
		memcached尽管是“分布式”缓存服务器，但服务器端并没有分布式功能。各个memcached不会互相通信以共享信息。那么，怎样进行分布式呢？这完全取决于客户端的实现。
		
		magent是一个memcached代理软件(memcached agent)，又叫memagent，其项目网址为：
		https://github.com/wangmh/memagent，防止单点现象，缓存代理也可以做备份，通过客户端连接到缓存代理服务器，缓存代理服务器连接缓存服务器。
		它提供的功能及特点有：
		1、和每个memcache server保持多个长连接，效果是减少memcache server保持的连接数量及创建销毁连接的开销。不过，memcache本身就支持大并发连接，这个功能也就没什么特别的说道。
		2、支持memcache的binary协议命令，实现请求的转发。
		3、和memcache一样，基于libevent的事件驱动来处理IO。
		4、支持ketama 的一致性hash算法。
		5、支持memcache backup集群，当memcache集群有机器挂了，memagent会将get请求转向memcache backup集群。这个功能对于cache的稳定性要求高的场景下会有用武之地。

		就提供的功能而言，memagent是个很简单的东西。对于较大的memcache集群，可以考虑搭一套memagent作为proxy使用。

	6、magent的hash算法（可自行搜索“一致性Hash算法”进一步了解）
		magent采用的是:Consistent Hashing（一致性Hash）原理,Consistent Hashing如下所示：首先求出memcached服务器（节点）的哈希值， 并将其配置到0～2^32的圆（continuum）上。 然后用同样的方法求出存储数据的键的哈希值，并映射到圆上。 然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上。 如果超过2^32仍然找不到服务器，就会保存到第一台memcached服务器上。
		若在这个一致性Hash园的所有节点中的某个位置添加一台memcached服务器。余数分布式算法由于保存键的服务器会发生巨大变化 而影响缓存的命中率，但Consistent Hashing中，只有在continuum上增加服务器的地点逆时针方向的第一台服务器上的键会受到影响。

II、Memcache + Magent 进行分布式缓存集群环境搭建
magent是一款开源的Memcached代理服务器软件，其项目网址为：
	http://code.google.com/p/memagent/

环境准备：
	下载Memcached、Magent、Libevent安装包，并上传到linux服务器中准备安装（安装目录不要有空格）；
	
一、安装步骤：
	（注意：wget下载包过程可免，若环境搭建所需安装包已单独下载并上传到服务器，安装时就不需要wget去下载了）
	本环境搭建安装包在目录"memcache_magent集群环境"下，故下面编译安装时不需要执行wget步骤；
1、编译安装libevent：
	wget http://monkey.org/~provos/libevent-1.4.9-stable.tar.gz
	tar zxvf libevent-1.4.9-stable.tar.gz
	cd libevent-1.4.9-stable/
	./configure --prefix=/usr
	make && make install
	cd ../


2、编译安装Memcached：
	wget http://danga.com/memcached/dist/memcached-1.2.6.tar.gz
	tar zxvf memcached-1.2.6.tar.gz
	cd memcached-1.2.6/
	./configure --with-libevent=/usr
	make && make install
	cd ../


3、编译安装magent：
	mkdir magent
	cd magent/
	wget http://memagent.googlecode.com/files/magent-0.5.tar.gz
	tar zxvf magent-0.5.tar.gz
	/sbin/ldconfig
	sed -i "s#LIBS = -levent#LIBS = -levent -lm#g" Makefile
	make
	cp magent /usr/bin/magent
	cd ../



二、使用实例：
1、启动memcached服务（在同一机器中使用同IP不同端口模拟多台机器上的memcached服务）
	memcached -m 1 -u root -d -l 127.0.0.1 -p 11211
	memcached -m 1 -u root -d -l 127.0.0.1 -p 11212
	memcached -m 1 -u root -d -l 127.0.0.1 -p 11213
memcached命令参数：
	-d 选项是启动一个守护进程
	-m 是分配给Memcache使用的内存数量，单位是MB
	-u 是运行Memcache的用户
	-l 是监听的服务器IP地址
	-p 是设置Memcache监听的端口
	-c 选项是最大运行的并发连接数，默认是1024，按照服务器的负载设定
	-P 是设置保存Memcache的pid文件
	更多参数使用memcached –h进行查看；

2、启动magent集群服务器（注意：下面magent启动参数配置中，最后一个节点服务参数 “-b” 表示127.0.0.1:11213是 -s 两个Memcached的备份）
	magent -u root -n 51200 -l 127.0.0.1 -p 12000 -s 127.0.0.1:11211 -s 127.0.0.1:11212 -b 127.0.0.1:11213
	若需要，可以再启动一组magent集群服务，这样就有两组集群提供服务，更加稳定高可用，如下：
	magent -u root -n 51200 -l 127.0.0.1 -p 13000 -s 127.0.0.1:11211 -s 127.0.0.1:11212 -b 127.0.0.1:11213
	
　　1、分别在11211、11212、11213端口启动3个Memcached进程，在12000端口开启magent代理程序；
　　2、11211、11212端口为主Memcached，11213端口为备份Memcached；
　　3、连接上12000的magent，set key1和set key2，根据哈希算法，key1被写入11211和11213端口的Memcached，
		key2被写入11212和11213端口的Memcached；
　　4、当11211、11212端口的Memcached死掉，连接到12000端口的magent取数据，数据会从11213端口的Memcached取出；
　　5、当11211、11212端口的Memcached重启复活，连接到12000端口，magent会从11211或11212端口的Memcached取数据，
		由于这两台Memcached重启后无数据，因此magent取得的将是空值，尽管11213端口的Memcached还有数据（此问题尚待改进；
		服务节点故障重启后丢失数据，需要做数据恢复（可采用定时维护服务器，给故障重启后的memcached服务从备份memcached服务中恢复数据），否则所有该服务节点上的业务请求都将请求数据库获取数据重新缓存到改节点上）。
magent 命令参数说明：
	1.-h this message   
	2.-u uid   
	3.-g gid   
	4.-p port, default is 11211. (0 to disable tcp support)   
	5.-s ip:port, set memcached server ip and port   
	6.-b ip:port, set backup memcached server ip and port   
	7.-l ip, local bind ip address, default is 0.0.0.0  
	8.-n number, set max connections, default is 4096  
	9.-D do not go to background   
	10.-k use ketama key allocation algorithm   
	11.-f file, unix socket path to listen on. default is off   
	12.-i number, max keep alive connections for one memcached server, default is 20  
	13.-v verbose	
	参数说明可用：magent -h进行查看；

三、整个测试流程：
	[root@localhost ~]#  telnet 127.0.0.1 12000
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	stats
	memcached agent v0.4
	matrix 1 -> 127.0.0.1:11211, pool size 0
	matrix 2 -> 127.0.0.1:11212, pool size 0
	END
	set key1 0 0 5
	lx123
	STORED
	set key2 0 0 5
	lx123
	STORED
	quit
	Connection closed by foreign host.


	[root@localhost ~]# telnet 127.0.0.1 11211
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	get key1
	END
	get key2
	VALUE key2 0 5
	lx123
	END
	quit
	Connection closed by foreign host.


	[root@localhost ~]# telnet 127.0.0.1 11212
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	get key1
	VALUE key1 0 5
	lx123
	END
	get key2
	END
	quit
	Connection closed by foreign host.


	[root@localhost ~]# telnet 127.0.0.1 11213
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	get key1
	VALUE key1 0 5
	lx123
	END
	get key2
	VALUE key2 0 5
	lx123
	END
	quit
	Connection closed by foreign host.


	模拟11211、11212端口的Memcached死掉
	[root@localhost ~]# ps -ef | grep memcached
	root      6589     1  0 01:25 ?        00:00:00 memcached -m 1 -u root -d -l 127.0.0.1 -p 11211
	root      6591     1  0 01:25 ?        00:00:00 memcached -m 1 -u root -d -l 127.0.0.1 -p 11212
	root      6593     1  0 01:25 ?        00:00:00 memcached -m 1 -u root -d -l 127.0.0.1 -p 11213
	root      6609  6509  0 01:44 pts/0    00:00:00 grep memcached
	[root@localhost ~]# kill -9 6589
	[root@localhost ~]# kill -9 6591
	[root@localhost ~]# telnet 127.0.0.1 12000
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	get key1 
	VALUE key1 0 5
	lx123
	END
	get key2
	VALUE key2 0 5
	lx123
	END
	quit
	Connection closed by foreign host.


	模拟11211、11212端口的Memcached重启复活
	[root@centos52 ~]# memcached -m 1 -u root -d -l 127.0.0.1 -p 11211
	[root@centos52 ~]# memcached -m 1 -u root -d -l 127.0.0.1 -p 11212
	[root@centos52 ~]# telnet 127.0.0.1 12000
	Trying 127.0.0.1...
	Connected to 127.0.0.1.
	Escape character is '^]'.
	get key1
	END
	get key2
	END
	quit
	Connection closed by foreign host.